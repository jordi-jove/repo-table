{"ast":null,"code":"import _slicedToArray from \"/Users/jordijove/Documents/CODE/carbon-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/jordijove/Documents/CODE/carbon-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"/Users/jordijove/Documents/CODE/carbon-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jordijove/Documents/CODE/carbon-tutorial/src/content/RepoPage/RepoPage.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query REPO_QUERY {\\n    # Let's use carbon as our organization\\n    organization(login: \\\"carbon-design-system\\\") {\\n      # We'll grab all the repositories in one go. To load more resources\\n      # continuously, see the advanced topics.\\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\\n        totalCount\\n        nodes {\\n          url\\n          homepageUrl\\n          issues(filterBy: { states: OPEN }) {\\n            totalCount\\n          }\\n          stargazers {\\n            totalCount\\n          }\\n          releases(first: 1) {\\n            totalCount\\n            nodes {\\n              name\\n            }\\n          }\\n          name\\n          updatedAt\\n          createdAt\\n          description\\n          id\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport RepoTable from './RepoTable';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\nvar REPO_QUERY = gql(_templateObject());\n\nvar LinkList = function LinkList(_ref) {\n  var url = _ref.url,\n      homepageUrl = _ref.homepageUrl;\n  return React.createElement(\"ul\", {\n    style: {\n      display: 'flex'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Link, {\n    href: url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"GitHub\")), homepageUrl && React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"\\xA0|\\xA0\"), React.createElement(Link, {\n    href: homepageUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Homepage\")));\n};\n\nvar getRowItems = function getRowItems(rows) {\n  return rows.map(function (row) {\n    return _objectSpread({}, row, {\n      key: row.id,\n      stars: row.stargazers.totalCount,\n      issueCount: row.issues.totalCount,\n      createdAt: new Date(row.createdAt).toLocaleDateString(),\n      updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n      links: React.createElement(LinkList, {\n        url: row.url,\n        homepageUrl: row.homepageUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })\n    });\n  });\n};\n\nvar headers = [{\n  key: 'name',\n  header: 'Name'\n}, {\n  key: 'createdAt',\n  header: 'Created'\n}, {\n  key: 'updatedAt',\n  header: 'Updated'\n}, {\n  key: 'issueCount',\n  header: 'Open Issues'\n}, {\n  key: 'stars',\n  header: 'Stars'\n}, {\n  key: 'links',\n  header: 'Links'\n}];\n/* const rows = [\n  {\n    id: '1',\n    name: 'Repo 1',\n    createdAt: 'Date',\n    updatedAt: 'Date',\n    issueCount: '123',\n    stars: '456',\n    links: 'Links',\n  },\n  {\n    id: '2',\n    name: 'Repo 2',\n    createdAt: 'Date',\n    updatedAt: 'Date',\n    issueCount: '123',\n    stars: '456',\n    links: 'Links',\n  },\n  {\n    id: '3',\n    name: 'Repo 3',\n    createdAt: 'Date',\n    updatedAt: 'Date',\n    issueCount: '123',\n    stars: '456',\n    links: 'Links',\n  },\n];\n*/\n\nvar RepoPage = function RepoPage() {\n  var RepoPage = function RepoPage() {\n    var _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        totalItems = _useState2[0],\n        setTotalItems = _useState2[1];\n\n    var _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        firstRowIndex = _useState4[0],\n        setFirstRowIndex = _useState4[1];\n\n    var _useState5 = useState(10),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentPageSize = _useState6[0],\n        setCurrentPageSize = _useState6[1];\n  };\n\n  return React.createElement(\"div\", {\n    className: \"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bx--row repo-page__r1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"bx--col-lg-16\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Query, {\n    query: REPO_QUERY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, function (_ref2) {\n    var loading = _ref2.loading,\n        error = _ref2.error,\n        data = _ref2.data;\n    // Wait for the request to complete\n    if (loading) return React.createElement(DataTableSkeleton, {\n      columnCount: headers.length + 1,\n      rowCount: 10,\n      headers: headers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }); // Something went wrong with the data fetching\n\n    if (error) return \"Error! \".concat(error.message); // If we're here, we've got our data!\n\n    var repositories = data.organization.repositories;\n    setTotalItems(repositories.totalCount);\n    var rows = getRowItems(repositories.nodes);\n    return React.createElement(React.Fragment, null, React.createElement(RepoTable, {\n      headers: headers,\n      rows: rows.slice(firstRowIndex, firstRowIndex + currentPageSize),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }));\n  }))));\n};\n\nexport default RepoPage;","map":{"version":3,"sources":["/Users/jordijove/Documents/CODE/carbon-tutorial/src/content/RepoPage/RepoPage.js"],"names":["React","useState","RepoTable","gql","Query","Link","DataTableSkeleton","Pagination","REPO_QUERY","LinkList","url","homepageUrl","display","getRowItems","rows","map","row","key","id","stars","stargazers","totalCount","issueCount","issues","createdAt","Date","toLocaleDateString","updatedAt","links","headers","header","RepoPage","totalItems","setTotalItems","firstRowIndex","setFirstRowIndex","currentPageSize","setCurrentPageSize","loading","error","data","length","message","repositories","organization","nodes","slice"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport RepoTable from './RepoTable';\nimport { gql } from 'apollo-boost';\nimport { Query } from 'react-apollo';\nimport { Link, DataTableSkeleton, Pagination } from 'carbon-components-react';\n\nconst REPO_QUERY = gql`\n  query REPO_QUERY {\n    # Let's use carbon as our organization\n    organization(login: \"carbon-design-system\") {\n      # We'll grab all the repositories in one go. To load more resources\n      # continuously, see the advanced topics.\n      repositories(first: 75, orderBy: { field: UPDATED_AT, direction: DESC }) {\n        totalCount\n        nodes {\n          url\n          homepageUrl\n          issues(filterBy: { states: OPEN }) {\n            totalCount\n          }\n          stargazers {\n            totalCount\n          }\n          releases(first: 1) {\n            totalCount\n            nodes {\n              name\n            }\n          }\n          name\n          updatedAt\n          createdAt\n          description\n          id\n        }\n      }\n    }\n  }\n`;\n\nconst LinkList = ({ url, homepageUrl }) => (\n  <ul style={{ display: 'flex' }}>\n    <li>\n      <Link href={url}>GitHub</Link>\n    </li>\n    {homepageUrl && (\n      <li>\n        <span>&nbsp;|&nbsp;</span>\n        <Link href={homepageUrl}>Homepage</Link>\n      </li>\n    )}\n  </ul>\n);\n\nconst getRowItems = rows =>\n  rows.map(row => ({\n    ...row,\n    key: row.id,\n    stars: row.stargazers.totalCount,\n    issueCount: row.issues.totalCount,\n    createdAt: new Date(row.createdAt).toLocaleDateString(),\n    updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n    links: <LinkList url={row.url} homepageUrl={row.homepageUrl} />,\n  }));\n\nconst headers = [\n  {\n    key: 'name',\n    header: 'Name',\n  },\n  {\n    key: 'createdAt',\n    header: 'Created',\n  },\n  {\n    key: 'updatedAt',\n    header: 'Updated',\n  },\n  {\n    key: 'issueCount',\n    header: 'Open Issues',\n  },\n  {\n    key: 'stars',\n    header: 'Stars',\n  },\n  {\n    key: 'links',\n    header: 'Links',\n  },\n];\n\n/* const rows = [\n  {\n    id: '1',\n    name: 'Repo 1',\n    createdAt: 'Date',\n    updatedAt: 'Date',\n    issueCount: '123',\n    stars: '456',\n    links: 'Links',\n  },\n  {\n    id: '2',\n    name: 'Repo 2',\n    createdAt: 'Date',\n    updatedAt: 'Date',\n    issueCount: '123',\n    stars: '456',\n    links: 'Links',\n  },\n  {\n    id: '3',\n    name: 'Repo 3',\n    createdAt: 'Date',\n    updatedAt: 'Date',\n    issueCount: '123',\n    stars: '456',\n    links: 'Links',\n  },\n];\n*/\n\nconst RepoPage = () => {\n  const RepoPage = () => {\n    const [totalItems, setTotalItems] = useState(0);\n    const [firstRowIndex, setFirstRowIndex] = useState(0);\n    const [currentPageSize, setCurrentPageSize] = useState(10);\n  };\n  return (\n    <div className=\"bx--grid bx--grid--full-width bx--grid--no-gutter repo-page\">\n      <div className=\"bx--row repo-page__r1\">\n        <div className=\"bx--col-lg-16\">\n          <Query query={REPO_QUERY}>\n            {({ loading, error, data }) => {\n              // Wait for the request to complete\n              if (loading)\n                return (\n                  <DataTableSkeleton\n                    columnCount={headers.length + 1}\n                    rowCount={10}\n                    headers={headers}\n                  />\n                );\n\n              // Something went wrong with the data fetching\n              if (error) return `Error! ${error.message}`;\n\n              // If we're here, we've got our data!\n              const { repositories } = data.organization;\n              setTotalItems(repositories.totalCount);\n              const rows = getRowItems(repositories.nodes);\n\n              return (\n                <>\n                  <RepoTable\n                    headers={headers}\n                    rows={rows.slice(\n                      firstRowIndex,\n                      firstRowIndex + currentPageSize\n                    )}\n                  />\n                </>\n              );\n            }}\n          </Query>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RepoPage;\n"]},"metadata":{},"sourceType":"module"}